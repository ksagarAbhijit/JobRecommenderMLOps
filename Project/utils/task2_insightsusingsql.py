# -*- coding: utf-8 -*-
"""Task2_InsightsUsingSQL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n6V0PtaOURpjmGjkDKE-7C1yPOQpoYWX
"""


import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

## Importing pandasql 
import pandasql as psql
import matplotlib.pyplot as plt

JobData = pd.read_csv('/content/drive/MyDrive/JobDescriptionPrediction/Resources/Data/raw/indeed_job_dataset.csv')

"""# 1.Top 5 Locations having highest no of Job openings"""
def getSqlMethod1():
  job_ind = psql.sqldf("SELECT  distinct Company_Industry, count(*) As No_Of_Jobs, ((Count(*)* 100 / (Select Count(*) From JobData)) || '%') AS PCT\
                                from JobData \
                                GROUP BY Company_Industry HAVING Company_Industry <>'NONE'\
                                ORDER BY No_Of_Jobs DESC LIMIT 5")
  return job_ind
"""## 5.Any Company on  a Hiring Surge?

"""

def getSqlMethod2():
  job_cmp = psql.sqldf("SELECT  distinct Company, count(*) As No_Of_Jobs, ((Count(*)* 100 / (Select Count(*) From JobData)) || '%') AS PCT\
                                from JobData \
                                GROUP BY Company HAVING Company <>'NONE'\
                                ORDER BY No_Of_Jobs DESC LIMIT 5")
  return job_cmp.head()

def getSqlMethod3():
  JP = psql.sqldf("select Company, Job_Type, Date_Since_Posted, count(*) from JobData where Date_Since_Posted <= 7 group by Company order by Date_Since_Posted, count(*) desc")
  return JP

def getSqlMethod9():
  job_ds_loc = psql.sqldf("SELECT     Location, count(Job_Title) As No_Of_DataScience_Jobs,\
                                  ((Count(Job_Title)* 100 / (SELECT     count(Job_Title) As No_Of_DataScience_Jobs from JobData WHERE Job_Title like '%Data Scientist%')) \
                                  || '%') AS PCT\
                                from JobData\
                                 WHERE Job_Title like '%Data Scientist%'\
                                  GROUP BY Location\
                                  ORDER BY No_Of_DataScience_Jobs DESC\
                                  LIMIT 5       ") 
  return job_ds_loc            

def getSqlMethod4():
  pq = psql.sqldf("SELECT    distinct Job_Type, sum(python) As Python_Jobs,\
                                   sum(sql) As SQL,  sum(r) AS R, sum(hadoop) AS Hadoop,\
                                   sum(tableau) AS Tableau, sum(sas) AS SAS, sum(spark) AS Spark, sum(Java) As JAVA, sum(Others) As Others\
                                from JobData\
                                 GROUP BY Job_Type\
                                   LIMIT 5       ")           
  return pq 


"""# 13.Top Skills Across Industry"""

def getSqlMethod5():
  pq_ind = psql.sqldf("SELECT    distinct Company_Industry, sum(python) As Python_Jobs,\
                                   sum(sql) As SQL,  sum(r) AS R, sum(hadoop) AS Hadoop,\
                                   sum(tableau) AS Tableau, sum(sas) AS SAS, sum(spark) AS Spark, sum(Java) As JAVA, sum(Others) As Others,\
                                (sum(python) + sum(sql) + sum(r) + sum(hadoop) +\
                                   sum(tableau) + sum(sas) + sum(spark) + sum(Java) + sum(Others) ) As Total\
                                from JobData WHERE Company_Industry <> 'None'\
                                 GROUP BY Company_Industry\
                                 ORDER BY Total DESC\
                                   LIMIT 5 ")           
  return pq_ind   


def getSqlMethod7():
  job_date_cmp = psql.sqldf("SELECT distinct Company , Company_Employees, Date_Since_Posted, count(*) AS No_of_unfilled_Jobs\
                               FROM JobData where Date_Since_Posted = 30 \
                                GROUP BY Company\
                                ORDER BY No_of_unfilled_Jobs DESC LIMIT 10")
  return job_date_cmp



"""## 24.Average Salary across job role"""

def getSqlMethod8():
  AS = psql.sqldf("select Job_Type, avg(Queried_Salary) as Average_Salary from JobData where Queried_Salary is not null group by Job_Type")
  return AS
  

"""# 27.Most Prefered Programming language across job roles?"""

def getSqlMethod6():
  PLJT = psql.sqldf("select Job_Type, sum(java) as Java, sum(python) as Python, sum(sas) as SAS, sum(r) as R \
                          from JobData group by Job_Type order by Job_Type")
  return PLJT


